local _adsr = stk.ADSR() -- ADSR()
adsr = function(x, fb, n, time, level, target, aTime, sLevel, rate, rTime, value, dTime)
    -- _adsr:keyOn()
    -- _adsr:keyOff()
    -- _adsr:setAttackRate(double rate)
    -- _adsr:setAttackTarget(double target)
    -- _adsr:setDecayRate(double rate)
    -- _adsr:setSustainLevel(double level)
    -- _adsr:setReleaseRate(double rate)
    -- _adsr:setAttackTime(double time)
    -- _adsr:setDecayTime(double time)
    -- _adsr:setReleaseTime(double time)
    -- _adsr:setAllTimes(double aTime, double dTime, double sLevel, double rTime)
    -- _adsr:setTarget(double target)
    -- _adsr:getState()
    -- _adsr:setValue(double value)
    -- _adsr:lastOut()
    -- _adsr:tick()
    -- _adsr:tick(StkFrames& frames, unsigned int channel)
end

local _asymp = stk.Asymp() -- Asymp()
asymp = function(x, fb, n, t60, time, target, value, tau)
    -- _asymp:keyOn()
    -- _asymp:keyOff()
    -- _asymp:setTau(double tau)
    -- _asymp:setTime(double time)
    -- _asymp:setT60(double t60)
    -- _asymp:setTarget(double target)
    -- _asymp:setValue(double value)
    -- _asymp:getState()
    -- _asymp:lastOut()
    -- _asymp:tick()
    -- _asymp:tick(StkFrames& frames, unsigned int channel)
end

local _bandedwg = stk.BandedWG() -- BandedWG()
bandedwg = function(x, fb, n, number, position, amp, preset, amplitude, rate, value, frequency)
    -- _bandedwg:clear()
    -- _bandedwg:setStrikePosition(double position)
    -- _bandedwg:setPreset(int preset)
    -- _bandedwg:setFrequency(double frequency)
    -- _bandedwg:startBowing(double amplitude, double rate)
    -- _bandedwg:stopBowing(double rate)
    -- _bandedwg:pluck(double amp)
    -- _bandedwg:noteOn(double frequency, double amplitude)
    -- _bandedwg:noteOff(double amplitude)
    -- _bandedwg:controlChange(int number, double value)
    -- _bandedwg:tick(unsigned int channel)
    -- _bandedwg:tick(StkFrames& frames, unsigned int channel)
end

local _beethree = stk.BeeThree() -- BeeThree()
beethree = function(x, fb, n, frequency, amplitude)
    -- _beethree:noteOn(double frequency, double amplitude)
    -- _beethree:tick(unsigned int channel)
    -- _beethree:tick(StkFrames& frames, unsigned int channel)
end

local _biquad = stk.BiQuad() -- BiQuad()
biquad = function(x, fb, n, b1, ignore, b2, clearState, a2, normalize, b0, a1, radius, fc, frequency, Q)
    -- _biquad:ignoreSampleRateChange(bool ignore)
    -- _biquad:setCoefficients(double b0, double b1, double b2, double a1, double a2, bool clearState)
    -- _biquad:setB0(double b0)
    -- _biquad:setB1(double b1)
    -- _biquad:setB2(double b2)
    -- _biquad:setA1(double a1)
    -- _biquad:setA2(double a2)
    -- _biquad:setResonance(double frequency, double radius, bool normalize)
    -- _biquad:setNotch(double frequency, double radius)
    -- _biquad:setLowPass(double fc, double Q)
    -- _biquad:setHighPass(double fc, double Q)
    -- _biquad:setBandPass(double fc, double Q)
    -- _biquad:setBandReject(double fc, double Q)
    -- _biquad:setAllPass(double fc, double Q)
    -- _biquad:setEqualGainZeroes()
    -- _biquad:lastOut()
    -- _biquad:tick(double input)
    -- _biquad:tick(StkFrames& frames, unsigned int channel)
    -- _biquad:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _blit = stk.Blit() -- Blit(double frequency)
blit = function(x, fb, n, frequency, phase, nHarmonics)
    -- _blit:reset()
    -- _blit:setPhase(double phase)
    -- _blit:getPhase()
    -- _blit:setFrequency(double frequency)
    -- _blit:setHarmonics(unsigned int nHarmonics)
    -- _blit:lastOut()
    -- _blit:tick()
    -- _blit:tick(StkFrames& frames, unsigned int channel)
end

local _blitsaw = stk.BlitSaw() -- BlitSaw(double frequency)
blitsaw = function(x, fb, n, frequency, nHarmonics)
    -- _blitsaw:reset()
    -- _blitsaw:setFrequency(double frequency)
    -- _blitsaw:setHarmonics(unsigned int nHarmonics)
    -- _blitsaw:lastOut()
    -- _blitsaw:tick()
    -- _blitsaw:tick(StkFrames& frames, unsigned int channel)
end

local _blitsquare = stk.BlitSquare() -- BlitSquare(double frequency)
blitsquare = function(x, fb, n, frequency, phase, nHarmonics)
    -- _blitsquare:reset()
    -- _blitsquare:setPhase(double phase)
    -- _blitsquare:getPhase()
    -- _blitsquare:setFrequency(double frequency)
    -- _blitsquare:setHarmonics(unsigned int nHarmonics)
    -- _blitsquare:lastOut()
    -- _blitsquare:tick()
    -- _blitsquare:tick(StkFrames& frames, unsigned int channel)
end

local _blowbotl = stk.BlowBotl() -- BlowBotl()
blowbotl = function(x, fb, n, number, amplitude, rate, value, frequency)
    -- _blowbotl:clear()
    -- _blowbotl:setFrequency(double frequency)
    -- _blowbotl:startBlowing(double amplitude, double rate)
    -- _blowbotl:stopBlowing(double rate)
    -- _blowbotl:noteOn(double frequency, double amplitude)
    -- _blowbotl:noteOff(double amplitude)
    -- _blowbotl:controlChange(int number, double value)
    -- _blowbotl:tick(unsigned int channel)
    -- _blowbotl:tick(StkFrames& frames, unsigned int channel)
end

local _blowhole = stk.BlowHole() -- BlowHole(double lowestFrequency)
blowhole = function(x, fb, n, newValue, number, amplitude, rate, value, frequency)
    -- _blowhole:clear()
    -- _blowhole:setFrequency(double frequency)
    -- _blowhole:setTonehole(double newValue)
    -- _blowhole:setVent(double newValue)
    -- _blowhole:startBlowing(double amplitude, double rate)
    -- _blowhole:stopBlowing(double rate)
    -- _blowhole:noteOn(double frequency, double amplitude)
    -- _blowhole:noteOff(double amplitude)
    -- _blowhole:controlChange(int number, double value)
    -- _blowhole:tick(unsigned int channel)
    -- _blowhole:tick(StkFrames& frames, unsigned int channel)
end

local _bowtable = stk.BowTable() -- BowTable()
bowtable = function(x, fb, n, maximum, offset, slope, minimum)
    -- _bowtable:setOffset(double offset)
    -- _bowtable:setSlope(double slope)
    -- _bowtable:setMinOutput(double minimum)
    -- _bowtable:setMaxOutput(double maximum)
    -- _bowtable:tick(double input)
    -- _bowtable:tick(StkFrames& frames, unsigned int channel)
    -- _bowtable:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _bowed = stk.Bowed() -- Bowed(double lowestFrequency)
bowed = function(x, fb, n, number, gain, amplitude, rate, value, frequency)
    -- _bowed:clear()
    -- _bowed:setFrequency(double frequency)
    -- _bowed:setVibrato(double gain)
    -- _bowed:startBowing(double amplitude, double rate)
    -- _bowed:stopBowing(double rate)
    -- _bowed:noteOn(double frequency, double amplitude)
    -- _bowed:noteOff(double amplitude)
    -- _bowed:controlChange(int number, double value)
    -- _bowed:tick(unsigned int channel)
    -- _bowed:tick(StkFrames& frames, unsigned int channel)
end

local _brass = stk.Brass() -- Brass(double lowestFrequency)
brass = function(x, fb, n, number, amplitude, rate, value, frequency)
    -- _brass:clear()
    -- _brass:setFrequency(double frequency)
    -- _brass:setLip(double frequency)
    -- _brass:startBlowing(double amplitude, double rate)
    -- _brass:stopBlowing(double rate)
    -- _brass:noteOn(double frequency, double amplitude)
    -- _brass:noteOff(double amplitude)
    -- _brass:controlChange(int number, double value)
    -- _brass:tick(unsigned int channel)
    -- _brass:tick(StkFrames& frames, unsigned int channel)
end

local _chorus = stk.Chorus() -- Chorus(double baseDelay)
chorus = function(x, fb, n, channel, frequency, depth)
    -- _chorus:clear()
    -- _chorus:setModDepth(double depth)
    -- _chorus:setModFrequency(double frequency)
    -- _chorus:lastOut(unsigned int channel)
    -- _chorus:tick(double input, unsigned int channel)
    -- _chorus:tick(StkFrames& frames, unsigned int channel)
    -- _chorus:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _clarinet = stk.Clarinet() -- Clarinet(double lowestFrequency)
clarinet = function(x, fb, n, number, amplitude, rate, value, frequency)
    -- _clarinet:clear()
    -- _clarinet:setFrequency(double frequency)
    -- _clarinet:startBlowing(double amplitude, double rate)
    -- _clarinet:stopBlowing(double rate)
    -- _clarinet:noteOn(double frequency, double amplitude)
    -- _clarinet:noteOff(double amplitude)
    -- _clarinet:controlChange(int number, double value)
    -- _clarinet:tick(unsigned int channel)
    -- _clarinet:tick(StkFrames& frames, unsigned int channel)
end

local _cubic = stk.Cubic() -- Cubic()
cubic = function(x, fb, n, gain, a3, a2, a1, threshold)
    -- _cubic:setA1(double a1)
    -- _cubic:setA2(double a2)
    -- _cubic:setA3(double a3)
    -- _cubic:setGain(double gain)
    -- _cubic:setThreshold(double threshold)
    -- _cubic:tick(double input)
    -- _cubic:tick(StkFrames& frames, unsigned int channel)
    -- _cubic:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _delay = stk.Delay() -- Delay(unsigned long delay, unsigned long maxDelay)
delay = function(x, fb, n, tapDelay, value, delay)
    -- _delay:getMaximumDelay()
    -- _delay:setMaximumDelay(unsigned long delay)
    -- _delay:setDelay(unsigned long delay)
    -- _delay:getDelay()
    -- _delay:tapOut(unsigned long tapDelay)
    -- _delay:tapIn(double value, unsigned long tapDelay)
    -- _delay:addTo(double value, unsigned long tapDelay)
    -- _delay:lastOut()
    -- _delay:nextOut()
    -- _delay:energy()
    -- _delay:tick(double input)
    -- _delay:tick(StkFrames& frames, unsigned int channel)
    -- _delay:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _delaya = stk.DelayA() -- DelayA(double delay, unsigned long maxDelay)
delaya = function(x, fb, n, tapDelay, value, delay)
    -- _delaya:clear()
    -- _delaya:getMaximumDelay()
    -- _delaya:setMaximumDelay(unsigned long delay)
    -- _delaya:setDelay(double delay)
    -- _delaya:getDelay()
    -- _delaya:tapOut(unsigned long tapDelay)
    -- _delaya:tapIn(double value, unsigned long tapDelay)
    -- _delaya:lastOut()
    -- _delaya:nextOut()
    -- _delaya:tick(double input)
    -- _delaya:tick(StkFrames& frames, unsigned int channel)
    -- _delaya:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _delayl = stk.DelayL() -- DelayL(double delay, unsigned long maxDelay)
delayl = function(x, fb, n, tapDelay, value, delay)
    -- _delayl:getMaximumDelay()
    -- _delayl:setMaximumDelay(unsigned long delay)
    -- _delayl:setDelay(double delay)
    -- _delayl:getDelay()
    -- _delayl:tapOut(unsigned long tapDelay)
    -- _delayl:tapIn(double value, unsigned long tapDelay)
    -- _delayl:lastOut()
    -- _delayl:nextOut()
    -- _delayl:tick(double input)
    -- _delayl:tick(StkFrames& frames, unsigned int channel)
    -- _delayl:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _drummer = stk.Drummer() -- Drummer()
drummer = function(x, fb, n, instrument, amplitude)
    -- _drummer:noteOn(double instrument, double amplitude)
    -- _drummer:noteOff(double amplitude)
    -- _drummer:tick(unsigned int channel)
    -- _drummer:tick(StkFrames& frames, unsigned int channel)
end

local _echo = stk.Echo() -- Echo(unsigned long maximumDelay)
echo = function(x, fb, n, delay)
    -- _echo:clear()
    -- _echo:setMaximumDelay(unsigned long delay)
    -- _echo:setDelay(unsigned long delay)
    -- _echo:lastOut()
    -- _echo:tick(double input)
    -- _echo:tick(StkFrames& frames, unsigned int channel)
    -- _echo:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _envelope = stk.Envelope() -- Envelope()
envelope = function(x, fb, n, time, target, rate, value, e)
    -- _envelope:operator=(Envelope& e)
    -- _envelope:keyOn(double target)
    -- _envelope:keyOff(double target)
    -- _envelope:setRate(double rate)
    -- _envelope:setTime(double time)
    -- _envelope:setTarget(double target)
    -- _envelope:setValue(double value)
    -- _envelope:getState()
    -- _envelope:lastOut()
    -- _envelope:tick()
    -- _envelope:tick(StkFrames& frames, unsigned int channel)
end

local _fmvoices = stk.FMVoices() -- FMVoices()
fmvoices = function(x, fb, n, frequency, number, value, amplitude)
    -- _fmvoices:setFrequency(double frequency)
    -- _fmvoices:noteOn(double frequency, double amplitude)
    -- _fmvoices:controlChange(int number, double value)
    -- _fmvoices:tick(unsigned int channel)
    -- _fmvoices:tick(StkFrames& frames, unsigned int channel)
end

local _flute = stk.Flute() -- Flute(double lowestFrequency)
flute = function(x, fb, n, number, aRatio, amplitude, rate, value, coefficient, frequency)
    -- _flute:clear()
    -- _flute:setFrequency(double frequency)
    -- _flute:setJetReflection(double coefficient)
    -- _flute:setEndReflection(double coefficient)
    -- _flute:setJetDelay(double aRatio)
    -- _flute:startBlowing(double amplitude, double rate)
    -- _flute:stopBlowing(double rate)
    -- _flute:noteOn(double frequency, double amplitude)
    -- _flute:noteOff(double amplitude)
    -- _flute:controlChange(int number, double value)
    -- _flute:tick(unsigned int channel)
    -- _flute:tick(StkFrames& frames, unsigned int channel)
end

local _formswep = stk.FormSwep() -- FormSwep()
formswep = function(x, fb, n, time, ignore, gain, radius, rate, frequency)
    -- _formswep:ignoreSampleRateChange(bool ignore)
    -- _formswep:setResonance(double frequency, double radius)
    -- _formswep:setStates(double frequency, double radius, double gain)
    -- _formswep:setTargets(double frequency, double radius, double gain)
    -- _formswep:setSweepRate(double rate)
    -- _formswep:setSweepTime(double time)
    -- _formswep:lastOut()
    -- _formswep:tick(double input)
    -- _formswep:tick(StkFrames& frames, unsigned int channel)
    -- _formswep:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _freeverb = stk.FreeVerb() -- FreeVerb()
freeverb = function(x, fb, n, mix, channel, value, isFrozen)
    -- _freeverb:setEffectMix(double mix)
    -- _freeverb:setRoomSize(double value)
    -- _freeverb:getRoomSize()
    -- _freeverb:setDamping(double value)
    -- _freeverb:getDamping()
    -- _freeverb:setWidth(double value)
    -- _freeverb:getWidth()
    -- _freeverb:setMode(bool isFrozen)
    -- _freeverb:getMode()
    -- _freeverb:clear()
    -- _freeverb:lastOut(unsigned int channel)
    -- _freeverb:tick(double inputL, double inputR, unsigned int channel)
    -- _freeverb:tick(StkFrames& frames, unsigned int channel)
    -- _freeverb:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _granulate = stk.Granulate() -- Granulate(), Granulate(unsigned int nVoices, std::string fileName, bool typeRaw)
granulate = function(x, fb, n, typeRaw, nVoices, duration, offset, randomness, channel, fileName, rampPercent, delay, stretchFactor)
    -- _granulate:openFile(std::string fileName, bool typeRaw)
    -- _granulate:reset()
    -- _granulate:setVoices(unsigned int nVoices)
    -- _granulate:setStretch(unsigned int stretchFactor)
    -- _granulate:setGrainParameters(unsigned int duration, unsigned int rampPercent, int offset, unsigned int delay)
    -- _granulate:setRandomFactor(double randomness)
    -- _granulate:lastOut(unsigned int channel)
    -- _granulate:tick(unsigned int channel)
    -- _granulate:tick(StkFrames& frames, unsigned int channel)
end

local _guitar = stk.Guitar() -- Guitar(unsigned int nStrings, std::string bodyfile)
guitar = function(x, fb, n, number, string, gain, position, bodyfile, amplitude, value, frequency)
    -- _guitar:clear()
    -- _guitar:setBodyFile(std::string bodyfile)
    -- _guitar:setPluckPosition(double position, int string)
    -- _guitar:setLoopGain(double gain, int string)
    -- _guitar:setFrequency(double frequency, unsigned int string)
    -- _guitar:noteOn(double frequency, double amplitude, unsigned int string)
    -- _guitar:noteOff(double amplitude, unsigned int string)
    -- _guitar:controlChange(int number, double value, int string)
    -- _guitar:lastOut()
    -- _guitar:tick(double input)
    -- _guitar:tick(StkFrames& frames, unsigned int channel)
    -- _guitar:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _hevymetl = stk.HevyMetl() -- HevyMetl()
hevymetl = function(x, fb, n, frequency, amplitude)
    -- _hevymetl:noteOn(double frequency, double amplitude)
    -- _hevymetl:tick(unsigned int channel)
    -- _hevymetl:tick(StkFrames& frames, unsigned int channel)
end

local _jcrev = stk.JCRev() -- JCRev(double T60)
jcrev = function(x, fb, n, channel, T60)
    -- _jcrev:clear()
    -- _jcrev:setT60(double T60)
    -- _jcrev:lastOut(unsigned int channel)
    -- _jcrev:tick(double input, unsigned int channel)
    -- _jcrev:tick(StkFrames& frames, unsigned int channel)
    -- _jcrev:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _jettable = stk.JetTable() -- 
jettable = function(x, fb, n, )
    -- _jettable:tick(double input)
    -- _jettable:tick(StkFrames& frames, unsigned int channel)
    -- _jettable:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _lentpitshift = stk.LentPitShift() -- LentPitShift(double periodRatio, int tMax)
lentpitshift = function(x, fb, n, shift)
    -- _lentpitshift:clear()
    -- _lentpitshift:setShift(double shift)
    -- _lentpitshift:tick(double input)
    -- _lentpitshift:tick(StkFrames& frames, unsigned int channel)
    -- _lentpitshift:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _mandolin = stk.Mandolin() -- Mandolin(double lowestFrequency)
mandolin = function(x, fb, n, detune, number, position, amplitude, value, frequency, size)
    -- _mandolin:clear()
    -- _mandolin:setDetune(double detune)
    -- _mandolin:setBodySize(double size)
    -- _mandolin:setPluckPosition(double position)
    -- _mandolin:setFrequency(double frequency)
    -- _mandolin:pluck(double amplitude)
    -- _mandolin:pluck(double amplitude, double position)
    -- _mandolin:noteOn(double frequency, double amplitude)
    -- _mandolin:noteOff(double amplitude)
    -- _mandolin:controlChange(int number, double value)
    -- _mandolin:tick(unsigned int channel)
    -- _mandolin:tick(StkFrames& frames, unsigned int channel)
end

local _mesh2d = stk.Mesh2D() -- Mesh2D(unsigned short nX, unsigned short nY)
mesh2d = function(x, fb, n, yFactor, number, xFactor, input, lenY, amplitude, lenX, value, frequency, decayFactor)
    -- _mesh2d:clear()
    -- _mesh2d:setNX(unsigned short lenX)
    -- _mesh2d:setNY(unsigned short lenY)
    -- _mesh2d:setInputPosition(double xFactor, double yFactor)
    -- _mesh2d:setDecay(double decayFactor)
    -- _mesh2d:noteOn(double frequency, double amplitude)
    -- _mesh2d:noteOff(double amplitude)
    -- _mesh2d:energy()
    -- _mesh2d:inputTick(double input)
    -- _mesh2d:controlChange(int number, double value)
    -- _mesh2d:tick(unsigned int channel)
    -- _mesh2d:tick(StkFrames& frames, unsigned int channel)
end

local _modulate = stk.Modulate() -- Modulate()
modulate = function(x, fb, n, rate, gain)
    -- _modulate:reset()
    -- _modulate:setVibratoRate(double rate)
    -- _modulate:setVibratoGain(double gain)
    -- _modulate:setRandomRate(double rate)
    -- _modulate:setRandomGain(double gain)
    -- _modulate:lastOut()
    -- _modulate:tick()
    -- _modulate:tick(StkFrames& frames, unsigned int channel)
end

local _moog = stk.Moog() -- Moog()
moog = function(x, fb, n, number, amplitude, mDepth, value, frequency, mSpeed)
    -- _moog:setFrequency(double frequency)
    -- _moog:noteOn(double frequency, double amplitude)
    -- _moog:setModulationSpeed(double mSpeed)
    -- _moog:setModulationDepth(double mDepth)
    -- _moog:controlChange(int number, double value)
    -- _moog:tick(unsigned int channel)
    -- _moog:tick(StkFrames& frames, unsigned int channel)
end

local _nrev = stk.NRev() -- NRev(double T60)
nrev = function(x, fb, n, channel, T60)
    -- _nrev:clear()
    -- _nrev:setT60(double T60)
    -- _nrev:lastOut(unsigned int channel)
    -- _nrev:tick(double input, unsigned int channel)
    -- _nrev:tick(StkFrames& frames, unsigned int channel)
    -- _nrev:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _noise = stk.Noise() -- Noise(unsigned int seed)
noise = function(x, fb, n, seed)
    -- _noise:setSeed(unsigned int seed)
    -- _noise:lastOut()
    -- _noise:tick()
    -- _noise:tick(StkFrames& frames, unsigned int channel)
end

local _onepole = stk.OnePole() -- OnePole(double thePole)
onepole = function(x, fb, n, a1, clearState, thePole, b0)
    -- _onepole:setB0(double b0)
    -- _onepole:setA1(double a1)
    -- _onepole:setCoefficients(double b0, double a1, bool clearState)
    -- _onepole:setPole(double thePole)
    -- _onepole:lastOut()
    -- _onepole:tick(double input)
    -- _onepole:tick(StkFrames& frames, unsigned int channel)
    -- _onepole:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _onezero = stk.OneZero() -- OneZero(double theZero)
onezero = function(x, fb, n, b1, theZero, clearState, b0)
    -- _onezero:setB0(double b0)
    -- _onezero:setB1(double b1)
    -- _onezero:setCoefficients(double b0, double b1, bool clearState)
    -- _onezero:setZero(double theZero)
    -- _onezero:lastOut()
    -- _onezero:tick(double input)
    -- _onezero:tick(StkFrames& frames, unsigned int channel)
    -- _onezero:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _prcrev = stk.PRCRev() -- PRCRev(double T60)
prcrev = function(x, fb, n, channel, T60)
    -- _prcrev:clear()
    -- _prcrev:setT60(double T60)
    -- _prcrev:lastOut(unsigned int channel)
    -- _prcrev:tick(double input, unsigned int channel)
    -- _prcrev:tick(StkFrames& frames, unsigned int channel)
    -- _prcrev:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _percflut = stk.PercFlut() -- PercFlut()
percflut = function(x, fb, n, frequency, amplitude)
    -- _percflut:setFrequency(double frequency)
    -- _percflut:noteOn(double frequency, double amplitude)
    -- _percflut:tick(unsigned int channel)
    -- _percflut:tick(StkFrames& frames, unsigned int channel)
end

local _pitshift = stk.PitShift() -- PitShift()
pitshift = function(x, fb, n, shift)
    -- _pitshift:clear()
    -- _pitshift:setShift(double shift)
    -- _pitshift:lastOut()
    -- _pitshift:tick(double input)
    -- _pitshift:tick(StkFrames& frames, unsigned int channel)
    -- _pitshift:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _plucked = stk.Plucked() -- Plucked(double lowestFrequency)
plucked = function(x, fb, n, frequency, amplitude)
    -- _plucked:clear()
    -- _plucked:setFrequency(double frequency)
    -- _plucked:pluck(double amplitude)
    -- _plucked:noteOn(double frequency, double amplitude)
    -- _plucked:noteOff(double amplitude)
    -- _plucked:tick(unsigned int channel)
    -- _plucked:tick(StkFrames& frames, unsigned int channel)
end

local _polezero = stk.PoleZero() -- PoleZero()
polezero = function(x, fb, n, b1, clearState, thePole, b0, a1, coefficient)
    -- _polezero:setB0(double b0)
    -- _polezero:setB1(double b1)
    -- _polezero:setA1(double a1)
    -- _polezero:setCoefficients(double b0, double b1, double a1, bool clearState)
    -- _polezero:setAllpass(double coefficient)
    -- _polezero:setBlockZero(double thePole)
    -- _polezero:lastOut()
    -- _polezero:tick(double input)
    -- _polezero:tick(StkFrames& frames, unsigned int channel)
end

local _recorder = stk.Recorder() -- Recorder()
recorder = function(x, fb, n, number, val, amplitude, rate, value, frequency)
    -- _recorder:clear()
    -- _recorder:setFrequency(double val)
    -- _recorder:startBlowing(double amplitude, double rate)
    -- _recorder:stopBlowing(double rate)
    -- _recorder:noteOn(double frequency, double amplitude)
    -- _recorder:noteOff(double amplitude)
    -- _recorder:controlChange(int number, double value)
    -- _recorder:tick(unsigned int channel)
    -- _recorder:tick(StkFrames& frames, unsigned int channel)
    -- _recorder:setBlowPressure(double val)
    -- _recorder:setVibratoGain(double val)
    -- _recorder:setVibratoFrequency(double val)
    -- _recorder:setNoiseGain(double val)
    -- _recorder:setBreathCutoff(double val)
    -- _recorder:setSoftness(double val)
end

local _reedtable = stk.ReedTable() -- ReedTable()
reedtable = function(x, fb, n, offset, slope)
    -- _reedtable:setOffset(double offset)
    -- _reedtable:setSlope(double slope)
    -- _reedtable:tick(double input)
    -- _reedtable:tick(StkFrames& frames, unsigned int channel)
    -- _reedtable:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _resonate = stk.Resonate() -- Resonate()
resonate = function(x, fb, n, number, amplitude, radius, value, frequency)
    -- _resonate:setResonance(double frequency, double radius)
    -- _resonate:setNotch(double frequency, double radius)
    -- _resonate:setEqualGainZeroes()
    -- _resonate:keyOn()
    -- _resonate:keyOff()
    -- _resonate:noteOn(double frequency, double amplitude)
    -- _resonate:noteOff(double amplitude)
    -- _resonate:controlChange(int number, double value)
    -- _resonate:tick(unsigned int channel)
    -- _resonate:tick(StkFrames& frames, unsigned int channel)
end

local _rhodey = stk.Rhodey() -- Rhodey()
rhodey = function(x, fb, n, frequency, amplitude)
    -- _rhodey:setFrequency(double frequency)
    -- _rhodey:noteOn(double frequency, double amplitude)
    -- _rhodey:tick(unsigned int channel)
    -- _rhodey:tick(StkFrames& frames, unsigned int channel)
end

local _saxofony = stk.Saxofony() -- Saxofony(double lowestFrequency)
saxofony = function(x, fb, n, number, aPosition, amplitude, rate, value, frequency)
    -- _saxofony:clear()
    -- _saxofony:setFrequency(double frequency)
    -- _saxofony:setBlowPosition(double aPosition)
    -- _saxofony:startBlowing(double amplitude, double rate)
    -- _saxofony:stopBlowing(double rate)
    -- _saxofony:noteOn(double frequency, double amplitude)
    -- _saxofony:noteOff(double amplitude)
    -- _saxofony:controlChange(int number, double value)
    -- _saxofony:tick(unsigned int channel)
    -- _saxofony:tick(StkFrames& frames, unsigned int channel)
end

local _shakers = stk.Shakers() -- Shakers(int type)
shakers = function(x, fb, n, instrument, number, value, amplitude)
    -- _shakers:noteOn(double instrument, double amplitude)
    -- _shakers:noteOff(double amplitude)
    -- _shakers:controlChange(int number, double value)
    -- _shakers:tick(unsigned int channel)
    -- _shakers:tick(StkFrames& frames, unsigned int channel)
end

local _simple = stk.Simple() -- Simple()
simple = function(x, fb, n, frequency, number, value, amplitude)
    -- _simple:setFrequency(double frequency)
    -- _simple:keyOn()
    -- _simple:keyOff()
    -- _simple:noteOn(double frequency, double amplitude)
    -- _simple:noteOff(double amplitude)
    -- _simple:controlChange(int number, double value)
    -- _simple:tick(unsigned int channel)
    -- _simple:tick(StkFrames& frames, unsigned int channel)
end

local _sinewave = stk.SineWave() -- SineWave()
sinewave = function(x, fb, n, time, phase, phaseOffset, rate, frequency)
    -- _sinewave:reset()
    -- _sinewave:setRate(double rate)
    -- _sinewave:setFrequency(double frequency)
    -- _sinewave:addTime(double time)
    -- _sinewave:addPhase(double phase)
    -- _sinewave:addPhaseOffset(double phaseOffset)
    -- _sinewave:lastOut()
    -- _sinewave:tick()
    -- _sinewave:tick(StkFrames& frames, unsigned int channel)
end

local _singwave = stk.SingWave() -- SingWave(std::string fileName, bool raw)
singwave = function(x, fb, n, peak, gain, target, rate, frequency)
    -- _singwave:reset()
    -- _singwave:normalize()
    -- _singwave:normalize(double peak)
    -- _singwave:setFrequency(double frequency)
    -- _singwave:setVibratoRate(double rate)
    -- _singwave:setVibratoGain(double gain)
    -- _singwave:setRandomGain(double gain)
    -- _singwave:setSweepRate(double rate)
    -- _singwave:setGainRate(double rate)
    -- _singwave:setGainTarget(double target)
    -- _singwave:noteOn()
    -- _singwave:noteOff()
    -- _singwave:lastOut()
    -- _singwave:tick()
    -- _singwave:tick(StkFrames& frames, unsigned int channel)
end

local _sitar = stk.Sitar() -- Sitar(double lowestFrequency)
sitar = function(x, fb, n, frequency, amplitude)
    -- _sitar:clear()
    -- _sitar:setFrequency(double frequency)
    -- _sitar:pluck(double amplitude)
    -- _sitar:noteOn(double frequency, double amplitude)
    -- _sitar:noteOff(double amplitude)
    -- _sitar:tick(unsigned int channel)
    -- _sitar:tick(StkFrames& frames, unsigned int channel)
end

local _sphere = stk.Sphere() -- Sphere(double radius)
sphere = function(x, fb, n, y, x, radius, z, mass)
    -- _sphere:setPosition(double x, double y, double z)
    -- _sphere:setVelocity(double x, double y, double z)
    -- _sphere:setRadius(double radius)
    -- _sphere:setMass(double mass)
    -- _sphere:getPosition()
    -- _sphere:getRelativePosition()
    -- _sphere:getVelocity()
    -- _sphere:isInside()
    -- _sphere:getRadius()
    -- _sphere:getMass()
    -- _sphere:addVelocity(double x, double y, double z)
    -- _sphere:tick(double timeIncrement)
end

local _stifkarp = stk.StifKarp() -- StifKarp(double lowestFrequency)
stifkarp = function(x, fb, n, aGain, number, position, stretch, amplitude, value, frequency)
    -- _stifkarp:clear()
    -- _stifkarp:setFrequency(double frequency)
    -- _stifkarp:setStretch(double stretch)
    -- _stifkarp:setPickupPosition(double position)
    -- _stifkarp:setBaseLoopGain(double aGain)
    -- _stifkarp:pluck(double amplitude)
    -- _stifkarp:noteOn(double frequency, double amplitude)
    -- _stifkarp:noteOff(double amplitude)
    -- _stifkarp:controlChange(int number, double value)
    -- _stifkarp:tick(unsigned int channel)
    -- _stifkarp:tick(StkFrames& frames, unsigned int channel)
end

local _tapdelay = stk.TapDelay() -- TapDelay(std::vector taps, unsigned long maxDelay)
tapdelay = function(x, fb, n, tap, taps, delay)
    -- _tapdelay:setMaximumDelay(unsigned long delay)
    -- _tapdelay:setTapDelays(std::vector taps)
    -- _tapdelay:getTapDelays()
    -- _tapdelay:lastOut(unsigned int tap)
    -- _tapdelay:tick(double input, StkFrames& outputs)
    -- _tapdelay:tick(StkFrames& frames, unsigned int channel)
    -- _tapdelay:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel)
end

local _tubebell = stk.TubeBell() -- TubeBell()
tubebell = function(x, fb, n, frequency, amplitude)
    -- _tubebell:noteOn(double frequency, double amplitude)
    -- _tubebell:tick(unsigned int channel)
    -- _tubebell:tick(StkFrames& frames, unsigned int channel)
end

local _twang = stk.Twang() -- Twang(double lowestFrequency)
twang = function(x, fb, n, frequency, coefficients, position, loopGain)
    -- _twang:clear()
    -- _twang:setLowestFrequency(double frequency)
    -- _twang:setFrequency(double frequency)
    -- _twang:setPluckPosition(double position)
    -- _twang:setLoopGain(double loopGain)
    -- _twang:setLoopFilter(std::vector coefficients)
    -- _twang:lastOut()
    -- _twang:tick(double input)
    -- _twang:tick(StkFrames& frames, unsigned int channel)
    -- _twang:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _twopole = stk.TwoPole() -- TwoPole()
twopole = function(x, fb, n, ignore, clearState, a2, normalize, b0, a1, radius, frequency)
    -- _twopole:ignoreSampleRateChange(bool ignore)
    -- _twopole:setB0(double b0)
    -- _twopole:setA1(double a1)
    -- _twopole:setA2(double a2)
    -- _twopole:setCoefficients(double b0, double a1, double a2, bool clearState)
    -- _twopole:setResonance(double frequency, double radius, bool normalize)
    -- _twopole:lastOut()
    -- _twopole:tick(double input)
    -- _twopole:tick(StkFrames& frames, unsigned int channel)
    -- _twopole:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _twozero = stk.TwoZero() -- TwoZero()
twozero = function(x, fb, n, b1, ignore, b2, clearState, b0, radius, frequency)
    -- _twozero:ignoreSampleRateChange(bool ignore)
    -- _twozero:setB0(double b0)
    -- _twozero:setB1(double b1)
    -- _twozero:setB2(double b2)
    -- _twozero:setCoefficients(double b0, double b1, double b2, bool clearState)
    -- _twozero:setNotch(double frequency, double radius)
    -- _twozero:lastOut()
    -- _twozero:tick(double input)
    -- _twozero:tick(StkFrames& frames, unsigned int channel)
    -- _twozero:tick(StkFrames& iFrames, StkFrames& oFrames, unsigned int iChannel, unsigned int oChannel)
end

local _voicform = stk.VoicForm() -- VoicForm()
voicform = function(x, fb, n, number, amplitude, whichOne, rate, vGain, nGain, value, frequency)
    -- _voicform:clear()
    -- _voicform:setFrequency(double frequency)
    -- _voicform:setPhoneme()
    -- _voicform:setVoiced(double vGain)
    -- _voicform:setUnVoiced(double nGain)
    -- _voicform:setFilterSweepRate(unsigned int whichOne, double rate)
    -- _voicform:setPitchSweepRate(double rate)
    -- _voicform:speak()
    -- _voicform:quiet()
    -- _voicform:noteOn(double frequency, double amplitude)
    -- _voicform:noteOff(double amplitude)
    -- _voicform:controlChange(int number, double value)
    -- _voicform:tick(unsigned int channel)
    -- _voicform:tick(StkFrames& frames, unsigned int channel)
end

local _voicer = stk.Voicer() -- Voicer(double decayTime)
voicer = function(x, fb, n, number, channel, group, amplitude, value, tag, noteNumber)
    -- _voicer:addInstrument(int group)
    -- _voicer:removeInstrument()
    -- _voicer:noteOn(double noteNumber, double amplitude, int group)
    -- _voicer:noteOff(double noteNumber, double amplitude, int group)
    -- _voicer:noteOff(long tag, double amplitude)
    -- _voicer:setFrequency(double noteNumber, int group)
    -- _voicer:setFrequency(long tag, double noteNumber)
    -- _voicer:pitchBend(double value, int group)
    -- _voicer:pitchBend(long tag, double value)
    -- _voicer:controlChange(int number, double value, int group)
    -- _voicer:controlChange(long tag, int number, double value)
    -- _voicer:silence()
    -- _voicer:channelsOut()
    -- _voicer:lastFrame()
    -- _voicer:lastOut(unsigned int channel)
    -- _voicer:tick(unsigned int channel)
    -- _voicer:tick(StkFrames& frames, unsigned int channel)
end

local _whistle = stk.Whistle() -- Whistle()
whistle = function(x, fb, n, number, amplitude, rate, value, frequency)
    -- _whistle:clear()
    -- _whistle:setFrequency(double frequency)
    -- _whistle:startBlowing(double amplitude, double rate)
    -- _whistle:stopBlowing(double rate)
    -- _whistle:noteOn(double frequency, double amplitude)
    -- _whistle:noteOff(double amplitude)
    -- _whistle:controlChange(int number, double value)
    -- _whistle:tick(unsigned int channel)
    -- _whistle:tick(StkFrames& frames, unsigned int channel)
end

local _wurley = stk.Wurley() -- Wurley()
wurley = function(x, fb, n, frequency, amplitude)
    -- _wurley:setFrequency(double frequency)
    -- _wurley:noteOn(double frequency, double amplitude)
    -- _wurley:tick(unsigned int channel)
    -- _wurley:tick(StkFrames& frames, unsigned int channel)
end

